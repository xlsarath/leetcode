// time complexity : O(n^2)
//space complexity : O(n)
import java.util.Arrays;

public class MinimizeMalwareSpread924 {

    public int minMalwareSpread(int[][] graph, int[] initial) {

        int[] colors = new int[graph.length];
        Arrays.fill(colors,-1);
        
        int color = 0;
        for(int i = 0 ; i < graph.length; i++){

            if(colors[i] == -1){
                dfs(i, graph, color, colors);
                color++;
            }
        }

        int [] groups = new int[color];
        for(int i = 0; i  < colors.length; i++){
            int currentColor =  colors[i];
            groups[currentColor] += 1;
        }

        int []infected =  new int[color];
        for(int i = 0; i < initial.length; i++){
            int infectedColor =  colors[initial[i]];
            infected[infectedColor] += 1;
        }

        Integer saveNode = null;
        Integer maxNodeSaved = null;

        for(int infectedNode : initial){


            int infectedColor = colors[infectedNode];
            int numberOfInfectedNodesInCurrentGroup = infected[infectedColor];
            if(numberOfInfectedNodesInCurrentGroup == 1){
                if(maxNodeSaved == null || groups[infectedColor] > maxNodeSaved) {
                    maxNodeSaved =  groups[infectedColor];
                    saveNode = infectedNode;
                } else if (groups[infectedColor] == maxNodeSaved && infectedNode < saveNode) {
                    saveNode = infectedNode;
                }
            }

        }


        if(saveNode == null) {
            saveNode = initial[0];
            for(int i = 1; i < initial.length; i++){
                saveNode = Math.min(saveNode,initial[i]);
            }
        }
        return saveNode;
    }

    private void dfs(int node, int[][] graph, int color, int[] colors) {

        if(colors[node] != -1) return;
        
        colors[node] = color;

        for(int i = 0; i < graph[0].length; i++){
            if(graph[node][i] == 1) {
                dfs(i, graph, color, colors);
            }
        }
        return;
    }

}

